import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import QrScanner from "qr-scanner";
import { useEffect, useRef, useState } from "react";
import styled from "styled-components";
import isUrl from "../util/isUrl";

type Dialog = {
  type: "string" | "url";
  data: any;
};

type CardButtonProps = {
  variant: "primary" | "secondary";
};

const Container = styled.div({
  flex: 1,
  display: "flex",
  width: "100%",
  minHeight: "100%",
});

const Main = styled.main({
  width: "100%",
  display: "flex",
  flexDirection: "column",
  alignItems: "center",
  padding: "16px",
  margin: "auto",
});

const Title = styled.h1({
  fontSize: "24px",
  textAlign: "center",
  fontWeight: "bold",
  whiteSpace: "nowrap",
  width: "100%",
});

const QrCodeDialog = styled.div({
  position: "fixed",
  inset: "0px",
  height: "100%",
  width: "100%",
  zIndex: 100,
});

const QrCodeStream = styled.video<{ isStartScan: boolean }>((props) => ({
  position: "fixed",
  inset: "0px",
  height: "100%",
  width: "100%",
  backgroundColor: "#000",
  objectFit: "fill",
  userSelect: "none",
  transition: "all 300ms 0s ease-in-out",
  marginTop: props.isStartScan ? "0px" : "100vh",
}));

const ImageLayout = styled.div({
  width: "100%",
  maxWidth: "320px",
  margin: "auto",
  paddingTop: "24px",
});

const ImageWrapper = styled.div({
  position: "relative",
  width: "100%",
  paddingBottom: "100%",
});

const ButtonStartScan = styled.button({
  width: "80px",
  height: "80px",
  borderRadius: "10000px",
  boxShadow: "0px 0px 8px #0004",
  fontSize: "14px",
  fontWeight: "bold",
  color: "#444",
  margin: "24px 0px",
});

const BackButton = styled.button({
  position: "absolute",
  top: "24px",
  left: "24px",
  padding: "4px 16px",
  color: "#FFF",
});

const DialogContainer = styled.div({
  position: "fixed",
  top: 0,
  left: 0,
  width: "100%",
  height: "100%",
  backgroundColor: "#0008",
  display: "flex",
  flexDirection: "column",
});

const DialogWrapper = styled.div({
  width: "100%",
  padding: "16px",
  margin: "auto 0px",
});

const Card = styled.div({
  width: "100%",
  backgroundColor: "#FFF",
  padding: "16px 16px",
  borderRadius: "8px",
  textAlign: "center",
});

const CardButtonGroup = styled.div({
  display: "flex",
  flexDirection: "row",
  justifyContent: "center",
  paddingTop: "16px",
});

const CardButton = styled.button<CardButtonProps>(({ variant }) => ({
  height: "40px",
  fontSize: "12px",
  fontWeight: "bold",
  padding: "4px 16px",
  borderRadius: "8px",
  color: variant === "primary" ? "#FFF" : "#000",
  backgroundColor: variant === "primary" ? "#000" : "transparent",
  border: "1px solid #000",
  minWidth: "100px",
  marginLeft: "16px",
  ":first-of-type": {
    marginLeft: "0px",
  },
}));

const DialogContent = styled.div({
  display: "flex",
  width: "100%",
  whiteSpace: "pre-wrap",
  fontSize: "14px",
  wordBreak: "break-all",
});

const LinkNewTab = styled.a({
  fontSize: "14px",
  margin: "16px auto",
  width: "100%",
  padding: "4px 24px",
});

const Home: NextPage = () => {
  const refQrCode = useRef<HTMLVideoElement>(null);
  const [apiQrCode, setApiQrCode] = useState<QrScanner>();
  const [isStartScan, setIsStartScan] = useState(false);
  const [dialog, setDialog] = useState<Dialog>();

  const onDecode = (scanResult: QrScanner.ScanResult) => {
    if (isUrl(scanResult.data)) {
      setDialog({ type: "url", data: scanResult.data });
    } else if (typeof scanResult.data === "string") {
      setDialog({ type: "string", data: scanResult.data });
    } else {
      setDialog({ type: "string", data: "QR CODE is not support" });
    }

    setIsStartScan(false);
  };

  const handleStart = () => {
    setIsStartScan(true);
  };

  const handleStop = () => {
    setIsStartScan(false);
  };

  const handleCloseDialog = () => {
    setDialog(undefined);
  };

  const onInitQrCode = async () => {
    const qrCodeElement = refQrCode.current;

    if (qrCodeElement) {
      const qrScanner = new QrScanner(qrCodeElement, onDecode, { highlightScanRegion: true });
      setApiQrCode(qrScanner);
    }
  };

  useEffect(() => {
    onInitQrCode();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  useEffect(() => {
    if (isStartScan) {
      apiQrCode?.start();
    } else {
      apiQrCode?.stop();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isStartScan]);

  return (
    <Container>
      <Head>
        <title>QR CODE SCANER Powered by BABY-2C</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Main>
        <Title>
          SCAN
          <wbr /> QR CODE
        </Title>
        <ImageLayout>
          <ImageWrapper>
            <Image src="/scan-logo.png" alt="scan-logo" width="100%" height="100%" layout="fill" />
          </ImageWrapper>
        </ImageLayout>
        <ButtonStartScan onClick={handleStart}>SCAN</ButtonStartScan>
        <QrCodeStream ref={refQrCode} isStartScan={isStartScan} />
        {isStartScan && (
          <QrCodeDialog>
            <BackButton onClick={handleStop}>BACK</BackButton>
          </QrCodeDialog>
        )}
        {dialog && (
          <DialogContainer>
            <DialogWrapper>
              <Card>
                {dialog.type === "string" && <DialogContent>{dialog.data}</DialogContent>}
                {dialog.type === "url" && (
                  <LinkNewTab href={dialog.data} target="_blank" rel="noreferrer noopener">
                    OPEN URL LINK
                  </LinkNewTab>
                )}
                <CardButtonGroup>
                  <CardButton variant="primary" onClick={handleCloseDialog}>
                    CLOSE
                  </CardButton>
                </CardButtonGroup>
              </Card>
            </DialogWrapper>
          </DialogContainer>
        )}
      </Main>
    </Container>
  );
};

export default Home;
